:py:mod:`luminal.managers.threads`
==================================

.. py:module:: luminal.managers.threads


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   luminal.managers.threads.TracedThread
   luminal.managers.threads.ThreadManager




.. py:class:: TracedThread(*args, **keywords)


   Bases: :py:obj:`threading.Thread`

   Custom thread object that can be halted using the :func:`halt()` function.

   This thread type extends the functionality of the standard :class:`threading.Thread` class to allow for the    thread execution to be halted using the :func:`halt()` function. Once halted, the thread will immediately stop    execution and expose any underlying pipes. This can be useful for debugging or other similar tasks.

   .. important:: This thread type is best utilized for small tasks that can be daemonized or terminated quickly.

   .. py:method:: __run()

      The control function for the :class:`TracedThread` that sets the global trace function and executes the thread's main function.

      .. rubric:: Notes

      - This method is used to run the code in the thread, but with a global trace function set beforehand.
      - The ``globaltrace`` attribute, set previously by the user, is set as the current trace function at runtime.
      - The previous :func:`__run_backup()` method, i.e. the original hardcoded run method, is called here to execute the        thread's main function.
      - The second to last line overwrites the :func:`run()` method with the original method, effectively undoing any trace        function set previously.


   .. py:method:: start()

      Starts the thread execution by invoking the :func:`Thread.start()` method, but not before setting the appropriate run method.

      .. rubric:: Notes

      - This method overrides the :func:`run()` method and replaces it with the :func:`__run()` method, which sets the global trace        function and executes the thread's main function.
      - The original run method is saved into the ``__run_backup`` attribute before it is swapped out.
      - Finally, the :func:`threading.Thread.start()` method is called on the thread object itself to actually start the        execution of the code.


   .. py:method:: globaltrace(frame, event, arg)

      The global trace function for a ``TracedThread`` that replaces the default function.

      :param frame: The current thread frame.
      :type frame: :class:`Any`
      :param event: The event type (e.g. 'call', 'line', 'return', 'exception').
      :type event: :class:`Any`
      :param arg: Event-specific arguments.
      :type arg: :class:`Any`

      :returns: If the event type is ``call``, ``self.localtrace`` is returned, otherwise :class:`None` is returned.
      :rtype: Optional[:class:`self.localtrace`]

      .. rubric:: Notes

      - This method serves as the global trace function for the :class:`TracedThread` class.
      - If the event type is ``call``, the trace function switches to ``self.localtrace`` which handles the local        tracing inside the thread in a context-specific manner.
      - If another event type is detected, :class:`None` is returned as there's no further action required.


   .. py:method:: localtrace(frame, event, arg)

      Trace function for the :class:`TracedThread` class.

      :param frame: The current frame being executed in the thread.
      :type frame: :class:`types.FrameType`
      :param event: The event that occurred in the thread during tracing.
      :type event: :class:`str`
      :param arg: Optional argument associated with the event.
      :type arg: :class:`Any`

      :returns: The next trace function to be called or :class:`None` to stop tracing.
      :rtype: Optional[:class:`Callable`]

      :raises SystemExit:: If the thread is halted and the event is line, the program is forcefully terminated.

      .. rubric:: Notes

      - This function can be registered as a trace function on a thread using :func:`sys.settrace()`.        It is called every time an event is encountered in the traced thread and returns the next        trace function to be called. If the thread is halted and the event is line, it raises a        ``SystemExit`` exception to stop the thread execution.


   .. py:method:: halt()

      Halt function for the :class:`TracedThread` class.

      .. rubric:: Notes

      - This function sets the ``halted`` attribute of the :class:`TracedThread` instance to ``True``, indicating that        the thread should be paused for debugging or other purposes. Once halted, the thread will stop        executing at the next available opportunity in its trace function.
      - This function is intended to be used in combination with the :func:`localtrace()` and :func:`globaltrace()` methods        from the ``sys`` module, where the former is registered as a trace function for a thread to halt the        thread at a specific point, and the latter is used to globally manipulate the trace function of        all threads in the running Python process.



.. py:class:: ThreadManager


   A class for managing multiple threads in a codebase.

   This class provides functionality for managing and controlling the execution of multiple threads in a
   program. It maintains a list of running and requested threads, a flag to stop all threads gracefully,
   and settings for running threads based on given limits.

   .. py:method:: _generate_uid(delimiter = '-')

      Generates a unique identifier for the instance of the :class:`ThreadManager` class.

      :param delimiter: The delimiter to use for concatenating the string chunks. Defaults to the `-` character.
      :type delimiter: :class:`str`

      :returns: A unique identifier for the :class:`ThreadManager` instance.
      :rtype: :class:`str`

      .. rubric:: Notes

      - This function generates a unique identifier for the :class:`ThreadManager` instance, based on a randomly generated        alphanumeric string. However, it splits the string into six equal chunks and concatenates them with the delimiter        to create the final UID.
      - This function is primarily intended for internal use by the :class:`ThreadManager` class to generate a unique        identifier for each instance. It can be called by other methods within the class to ensure that the        identifier is unique and consistent for each instance.
      - Note that the delimiter argument can be customized to fit the specific needs of the program or application,        but it is recommended that a standard delimiter such as ``-`` or ``_`` be used to ensure portability and        compatibility with other systems.


   .. py:method:: _clean_threads()

      Cleans up the list of running threads in the :class:`ThreadManager` instance.

      This function removes completed threads from the ``_running_threads`` collection of a :class:`ThreadManager` instance.
      It does so by creating a copy of ``_running_threads``, looping through it to find completed threads and
      clears them from the original dictionary.

      .. rubric:: Notes

      - This function is intended for internal use by the :class:`ThreadManager` class to clean up the list of running        threads after they have finished executing. It should be called regularly to prevent the running thread        list from growing too large and potentially causing memory issues.
      - The function works by creating a shallow copy of the running threads dictionary to ensure that the        original dictionary is not modified during iteration, which can cause unexpected behavior. If a thread        is found to have finished executing, it is removed from the running threads dictionary to keep the list        up to date.
      - Note that this function does not stop or halt any individual threads; it simply removes finished threads        from the list of running threads. Any necessary cleanup or stopping of threads should be handled by other        methods or functions within the :class:`ThreadManager` class.


   .. py:method:: _stop_threads()

      Stops all running threads in the :class:`ThreadManager` instance.

      This function iterates over the list of running threads in the :class:`ThreadManager` instance and stops each        thread using the :func:`halt()` function of the :class:`TracedThread` class. It then waits for each stopped thread to        complete using the :func:`join()` function before cleaning up the list of running threads.

      .. important:: Invoking the :func:`halt()` function on a :class:`TracedThread` instance may cause the thread to stop executing        immediately, so it should be used with caution. Additionally, any necessary cleanup or stopping of threads        should be handled by other methods or functions within the :class:`ThreadManager` class.

      .. rubric:: Notes

      - This function is intended for internal use by the :class:`ThreadManager` class to stop all running threads in        a program abrubtly. It should be called when the user requests to stop all threads, or when the        program is about to exit.
      - The function works by creating a shallow copy of the running threads dictionary to ensure that the        original dictionary is not modified during iteration, which can cause unexpected behavior. For each        running thread, the function checks if it is still alive, and if so, halts the thread using the :func:`halt()`        function of the :class:`TracedThread` class. It then waits for the thread to complete halting using the        :func:`join()` function before cleaning up the list of running threads.


   .. py:method:: _start_threads(watching_threads = False)

      Starts threads requested in the queue for the :class:`ThreadManager` object.

      :param watching_threads: When ``True``, the method will check every so often to see if any new threads have been appended to the queue. Defaults to ``False``.
      :type watching_threads: Optional[:class:`bool`]

      :raises NoThreadsFoundError:: Raised when there are no threads ready to run in the queue.
      :raises ThreadLimitReachedError:: Raised when the maximum number of threads allowed to run in the calling :class:`ThreadManager` instance has been reached.

      .. rubric:: Notes

      - The ``_requested_threads`` collection is used to keep track of which threads in the queue need to be executed. The method        checks to see if any of the requested threads can be run when the thread limit of the :class:`ThreadManager` is not exceeded. Thread limit        is determined by the ``thread_limit`` of the calling :class:`ThreadManager` instance.
      - If there are no threads in the queue, a :class:`NoThreadsFoundError` is raised. If the maximum number of threads allowed to run        in the calling instance has been reached, a :class:`ThreadLimitReachedError` is raised. Once a thread has been started, it is added to the        ``_running_threads`` attribute so it can be tracked.
      - If a thread has already been registered as running but is still in the queue, it is removed so that it doesn't get executed twice.


   .. py:method:: append_thread(function, args = (), kwargs = {})

      Appends a thread to the request queue for the :class:`ThreadManager` object.

      :param function: The callable function to be executed.
      :type function: :class:`object`
      :param args: A tuple of positional arguments to be passed into the function when executed. Defaults to `()`.
      :type args: Optional[:class:`tuple`]
      :param kwargs: A dictionary of keyword arguments to be passed into the function when executed. Defaults to `{}`.
      :type kwargs: Optional(:class:`dict[str, Any]`]

      :returns: `True` if the thread was successfully appended to the queue, `False` otherwise.
      :rtype: :class:`bool`

      .. rubric:: Notes

      - The ``_requested_threads`` collection is used to keep track of which threads can be executed when thread execution is started        in the :class:`ThreadManager` instance. Each thread is represented as a tuple that contains ``function``, ``args`` and ``kwargs``        attributes, respectively. The ``function`` is the callable object that will be executed when the thread is run, while        the ``args`` and ``kwargs`` are arguments that will be passed into the ``function`` once executed.
      - The method returns ``True`` if the thread was added to the queue successfully and ``False`` otherwise. An exception catch        is implemented in case there is an error in creating the thread. If the :func:`_generate_uid()` method raises an exception,        ``False`` is returned as the thread could not be added to the queue.


   .. py:method:: stop()

      Sets the `_flag_request` attribute to ``True``, a signal that stops all running threads in the :class:`ThreadManager` object.

      .. rubric:: Notes

      The ``_flag_request`` attribute is a boolean flag that is used to indicate if there is a stop request from the        :class:`ThreadManager` object. When ``_flag_request`` is set to ``True``, all running threads are stopped. This method sets the        value of this attribute to ``True`` and does not return any value. Once this is done, the :func:`stop_listening()` method        is called by the :class:`ThreadManager` object so that all the threads that are currently running can terminate.


   .. py:method:: halt()

      Halts all running threads in the :class:`ThreadManager` object.

      .. rubric:: Notes

      This method is used to stop (halt) all running threads in the :class:`ThreadManager` object instance. The method achieves this        by calling the :func:`_stop_threads()` method of the :class:`ThreadManager` object which terminates all running threads. After this        method is called, the ``_running_threads`` collection of the :class:`ThreadManager` is set to an empty dictionary. The method does        not return anything.


   .. py:method:: run()

      Starts all threads in the queue for the :class:`ThreadManager` instance.

      :raises ThreadsAlreadyRunningError: Raised when new threads have already been started and are currently running.

      .. rubric:: Notes

      This method is used to start all threads that are in the ``_requested_threads`` collection of the :class:`ThreadManager` object        instance. The method calls the :func:`_start_threads()` function of the :class:`ThreadManager` object, and attempts to start all        pending threads in the queue. The function raises a :class:`ThreadsAlreadyRunningError` if new threads have already been started and        are currently running to avoid starting new threads on top of already running threads.


   .. py:method:: watch()

      Starts a background thread that continuously starts all threads in the request queue for the :class:`ThreadManager` instance.

      :raises ThreadManagerAlreadyRunningError: Raised when a manager has already been spawned and is currently watching for threads to start.

      .. rubric:: Notes

      This method starts a parent background thread that continuously tries to start child threads that are in the ``_requested_threads``
      collection of the :class:`ThreadManager` object. The method raises a :class:`ThreadManagerAlreadyRunningError` if a manager has already
      been spawned and is currently watching for threads to start. It avoids starting new threads on top of already running threads too.

      - The :func:`_watch()` function tries to start any pending threads by calling :func:`_start_threads(watching_threads=True)`.
      - If the thread limit is reached, a :class:`ThreadLimitReachedError` exception is caught and then the :func:`_clean_threads()` method        is called to cleanup/shutdown any inactive threads. If any other exception occurs, it will be raised except if the        exception message starts with ``"Thread limit"``. In this case, :func:`_clean_threads()` is called to cleanup inactive threads.

      In conclusion, the method adds the new thread that it starts to the ``_running_threads`` attribute of the :class:`ThreadManager` object,
      as well as to the ``_requested_threads`` collection. The method also sets the ``_currently_watching`` flag to ``True``. This will prevent
      subsequent calls to this method if ``_currently_watching`` is already ``True``.



