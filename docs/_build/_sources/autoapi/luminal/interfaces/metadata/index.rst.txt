:py:mod:`luminal.interfaces.metadata`
=====================================

.. py:module:: luminal.interfaces.metadata


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   luminal.interfaces.metadata.ClassProperty
   luminal.interfaces.metadata.MetaProperties




.. py:class:: ClassProperty


   Bases: :py:obj:`property`

   A decorator that turns a method into a class property.

   This class inherits from Python's built-in :class:`property` class and overrides    its :func:`__get__()` method to allow it to be used as a class property.

   .. rubric:: Examples

   To use :class:`ClassProperty`, simply decorate a method with it:

   >>> class MyClass:
   ...     _prop = 'value'
   ...
   ...     @ClassProperty
   ...     def prop(cls):
   ...         return cls._prop
   ...
   >>> MyClass.prop
   'value'

   .. py:method:: __get__(*args, **_)

      Get the value of the class property for a given object or class.

      :returns: The value of the class property.
      :rtype: :class:`object`

      :raises AttributeError: If the property is accessed on an object that does not
          have an attribute with the same name as the property.


   .. py:method:: __set__(cls_or_instance, value)

      Set the value of the class property.

      This method is called when the class property is set on the class or an
      instance of the class. However, because this is a class property, this
      method will only be called when the property is set by the class itself,
      and is not intended for external use; or even by private methods.

      :param cls_or_instance: The class that the property is being set on.
      :type cls_or_instance: :class:`object`
      :param value: The new value of the class property.
      :type value: :class:`object`

      :raises AttributeError: When attempting to set the class property on an
          instance of the class rather than the class itself.


   .. py:method:: __delete__(cls_or_instance)

      Delete the class property from the class.

      :param cls_or_instance: The class from which the class property is being deleted.
      :type cls_or_instance: :class:`object`

      :raises AttributeError: When attempting to delete the class property from an
          instance of the class rather than the class itself.


   .. py:method:: _get_class(cls_or_instance)

      Get the class of an object, or return the class itself if given.

      :param cls_instance: The object or type whose class should be retrieved.
      :type cls_instance: :class:`Type[object|type]`

      :returns: * :class:`type` -- The class of the object if one is provided, or the class itself if a
                  class is provided.
                * *Raises*
                * *----------*
                * *TypeError* -- An exception if ``cls_or_instance`` is not a valid object or type.



.. py:class:: MetaProperties


   Bases: :py:obj:`type`

   A metaclass that enables the `ClassProperty` decorator to work properly
   with class-level operations like setting and deleting properties.

   When using `ClassProperty` to create class properties, the containing class
   must use this metaclass in order for the property to work properly with
   class-level operations like setting and deleting the property.

   For example, to use `ClassProperty` to define a read-only class property:

   >>> class MyClass(metaclass=MetaProperties):
   ...     @ClassProperty
   ...     def prop(cls):
   ...         return "value"
   ...
   >>> MyClass.prop # Get the value of the property.
   'value'
   >>> MyClass.prop = "new value" # Attempt to set the value of the property.
   AttributeError: can't set attribute
   >>> del MyClass.prop # Attempt to delete the property.
   AttributeError: can't delete attribute

   Note that attempting to set or delete a `ClassProperty` object will raise
   an :class:`AttributeError` by default, unless the :func:`__set__()` and/or
   :func:`__delete__()` methods are defined on the :class:`ClassProperty` object.

   .. seealso::

      :class:`ClassProperty`
          The decorator used to create class properties.

   .. py:method:: __setattr__(name, value)

      Override the :func:`__setattr__()` method to allow setting class properties.

      This method is called when an attribute of the class is set. If the        attribute is a :class:`ClassProperty` instance (as determined by the        presence of a :func:`__set__()` method on the instance), it will call        the :func:`__set__()` method to set the property's value. Otherwise, it        will invoke the superclass implementation of :func:`__setattr__()` to handle        the attribute in the usual way.

      :param name: The name of the attribute that's being set.
      :type name: :class:`str`
      :param value: The new value of the attribute.
      :type value: :class:`object`

      :raises AttributeError: If ``name`` refers to a :class:`ClassProperty` object and the :func:`__set__()`            method of that object raises an :class:`AttributeError`.


   .. py:method:: __delattr__(name)

      Override the :func:`__delattr__()` method to allow deleting of class properties.

      :param name: The name of the attribute that's being deleted.
      :type name: :class:`str`

      :raises AttributeError: If ``name`` refers to a :class:`ClassProperty` object and the :func:`__delete__()`            method of that object raises an :class:`AttributeError`.

      .. rubric:: Notes

      - This method is called when an attribute of the class is deleted. If the        attribute is a :class:`ClassProperty` instance (as determined by the presence        of a :func:`__delete__()` method on the instance), it will call the :func:`__delete__()`        method to delete the property. Otherwise, it will invoke the superclass implementation of        :func:`__delattr__()` to handle the attribute in the usual way.


   .. py:method:: _get_attribute(name)

      Retrieves a :class:`ClassProperty` attribute with the given ``name`` from this :class:`MetaProperties` instance.

      :param name: The name of the attribute to retrieve.
      :type name: :class:`str`

      :returns: The :class:`ClassProperty` object for the attribute, if it exists. Otherwise, returns ``None``.
      :rtype: Optional[:class:`ClassProperty`]



